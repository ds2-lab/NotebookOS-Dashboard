// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\pkg\jupyter (interfaces: KernelConnection,KernelSessionManager,KernelManagerMetrics,KernelMessage,MetricsConsumer)
//
// Generated by this command:
//
//	mockgen -destination C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\pkg\jupyter\mock\mock_jupyter.go C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\pkg\jupyter KernelConnection,KernelSessionManager,KernelManagerMetrics,KernelMessage,MetricsConsumer
//

// Package mock_jupyter is a generated GoMock package.
package mock_jupyter

import (
	reflect "reflect"
	time "time"

	jupyter "github.com/scusemua/workload-driver-react/m/v2/pkg/jupyter"
	gomock "go.uber.org/mock/gomock"
)

// MockKernelConnection is a mock of KernelConnection interface.
type MockKernelConnection struct {
	ctrl     *gomock.Controller
	recorder *MockKernelConnectionMockRecorder
	isgomock struct{}
}

// MockKernelConnectionMockRecorder is the mock recorder for MockKernelConnection.
type MockKernelConnectionMockRecorder struct {
	mock *MockKernelConnection
}

// NewMockKernelConnection creates a new mock instance.
func NewMockKernelConnection(ctrl *gomock.Controller) *MockKernelConnection {
	mock := &MockKernelConnection{ctrl: ctrl}
	mock.recorder = &MockKernelConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelConnection) EXPECT() *MockKernelConnectionMockRecorder {
	return m.recorder
}

// AddMetadata mocks base method.
func (m *MockKernelConnection) AddMetadata(key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetadata", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetadata indicates an expected call of AddMetadata.
func (mr *MockKernelConnectionMockRecorder) AddMetadata(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetadata", reflect.TypeOf((*MockKernelConnection)(nil).AddMetadata), key, value)
}

// ClientId mocks base method.
func (m *MockKernelConnection) ClientId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClientId")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClientId indicates an expected call of ClientId.
func (mr *MockKernelConnectionMockRecorder) ClientId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClientId", reflect.TypeOf((*MockKernelConnection)(nil).ClientId))
}

// Close mocks base method.
func (m *MockKernelConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockKernelConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockKernelConnection)(nil).Close))
}

// Connected mocks base method.
func (m *MockKernelConnection) Connected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Connected indicates an expected call of Connected.
func (mr *MockKernelConnectionMockRecorder) Connected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connected", reflect.TypeOf((*MockKernelConnection)(nil).Connected))
}

// ConnectionStatus mocks base method.
func (m *MockKernelConnection) ConnectionStatus() jupyter.KernelConnectionStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectionStatus")
	ret0, _ := ret[0].(jupyter.KernelConnectionStatus)
	return ret0
}

// ConnectionStatus indicates an expected call of ConnectionStatus.
func (mr *MockKernelConnectionMockRecorder) ConnectionStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectionStatus", reflect.TypeOf((*MockKernelConnection)(nil).ConnectionStatus))
}

// GetMetadata mocks base method.
func (m *MockKernelConnection) GetMetadata(key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockKernelConnectionMockRecorder) GetMetadata(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockKernelConnection)(nil).GetMetadata), key)
}

// InterruptKernel mocks base method.
func (m *MockKernelConnection) InterruptKernel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterruptKernel")
	ret0, _ := ret[0].(error)
	return ret0
}

// InterruptKernel indicates an expected call of InterruptKernel.
func (mr *MockKernelConnectionMockRecorder) InterruptKernel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterruptKernel", reflect.TypeOf((*MockKernelConnection)(nil).InterruptKernel))
}

// JupyterServerAddress mocks base method.
func (m *MockKernelConnection) JupyterServerAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JupyterServerAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// JupyterServerAddress indicates an expected call of JupyterServerAddress.
func (mr *MockKernelConnectionMockRecorder) JupyterServerAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JupyterServerAddress", reflect.TypeOf((*MockKernelConnection)(nil).JupyterServerAddress))
}

// KernelId mocks base method.
func (m *MockKernelConnection) KernelId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KernelId")
	ret0, _ := ret[0].(string)
	return ret0
}

// KernelId indicates an expected call of KernelId.
func (mr *MockKernelConnectionMockRecorder) KernelId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelId", reflect.TypeOf((*MockKernelConnection)(nil).KernelId))
}

// RegisterIoPubHandler mocks base method.
func (m *MockKernelConnection) RegisterIoPubHandler(id string, handler jupyter.IOPubMessageHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterIoPubHandler", id, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterIoPubHandler indicates an expected call of RegisterIoPubHandler.
func (mr *MockKernelConnectionMockRecorder) RegisterIoPubHandler(id, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterIoPubHandler", reflect.TypeOf((*MockKernelConnection)(nil).RegisterIoPubHandler), id, handler)
}

// RequestExecute mocks base method.
func (m *MockKernelConnection) RequestExecute(args *jupyter.RequestExecuteArgs) (jupyter.KernelMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestExecute", args)
	ret0, _ := ret[0].(jupyter.KernelMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequestExecute indicates an expected call of RequestExecute.
func (mr *MockKernelConnectionMockRecorder) RequestExecute(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestExecute", reflect.TypeOf((*MockKernelConnection)(nil).RequestExecute), args)
}

// SetOnError mocks base method.
func (m *MockKernelConnection) SetOnError(arg0 func(error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOnError", arg0)
}

// SetOnError indicates an expected call of SetOnError.
func (mr *MockKernelConnectionMockRecorder) SetOnError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOnError", reflect.TypeOf((*MockKernelConnection)(nil).SetOnError), arg0)
}

// Stderr mocks base method.
func (m *MockKernelConnection) Stderr() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockKernelConnectionMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockKernelConnection)(nil).Stderr))
}

// Stdout mocks base method.
func (m *MockKernelConnection) Stdout() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *MockKernelConnectionMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockKernelConnection)(nil).Stdout))
}

// StopRunningTrainingCode mocks base method.
func (m *MockKernelConnection) StopRunningTrainingCode(waitForResponse bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRunningTrainingCode", waitForResponse)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRunningTrainingCode indicates an expected call of StopRunningTrainingCode.
func (mr *MockKernelConnectionMockRecorder) StopRunningTrainingCode(waitForResponse any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRunningTrainingCode", reflect.TypeOf((*MockKernelConnection)(nil).StopRunningTrainingCode), waitForResponse)
}

// UnregisterIoPubHandler mocks base method.
func (m *MockKernelConnection) UnregisterIoPubHandler(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnregisterIoPubHandler", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnregisterIoPubHandler indicates an expected call of UnregisterIoPubHandler.
func (mr *MockKernelConnectionMockRecorder) UnregisterIoPubHandler(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterIoPubHandler", reflect.TypeOf((*MockKernelConnection)(nil).UnregisterIoPubHandler), id)
}

// Username mocks base method.
func (m *MockKernelConnection) Username() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Username")
	ret0, _ := ret[0].(string)
	return ret0
}

// Username indicates an expected call of Username.
func (mr *MockKernelConnectionMockRecorder) Username() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Username", reflect.TypeOf((*MockKernelConnection)(nil).Username))
}

// MockKernelSessionManager is a mock of KernelSessionManager interface.
type MockKernelSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockKernelSessionManagerMockRecorder
	isgomock struct{}
}

// MockKernelSessionManagerMockRecorder is the mock recorder for MockKernelSessionManager.
type MockKernelSessionManagerMockRecorder struct {
	mock *MockKernelSessionManager
}

// NewMockKernelSessionManager creates a new mock instance.
func NewMockKernelSessionManager(ctrl *gomock.Controller) *MockKernelSessionManager {
	mock := &MockKernelSessionManager{ctrl: ctrl}
	mock.recorder = &MockKernelSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelSessionManager) EXPECT() *MockKernelSessionManagerMockRecorder {
	return m.recorder
}

// AddMetadata mocks base method.
func (m *MockKernelSessionManager) AddMetadata(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMetadata", key, value)
}

// AddMetadata indicates an expected call of AddMetadata.
func (mr *MockKernelSessionManagerMockRecorder) AddMetadata(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetadata", reflect.TypeOf((*MockKernelSessionManager)(nil).AddMetadata), key, value)
}

// ConnectTo mocks base method.
func (m *MockKernelSessionManager) ConnectTo(kernelId, sessionId, username string) (jupyter.KernelConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectTo", kernelId, sessionId, username)
	ret0, _ := ret[0].(jupyter.KernelConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectTo indicates an expected call of ConnectTo.
func (mr *MockKernelSessionManagerMockRecorder) ConnectTo(kernelId, sessionId, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectTo", reflect.TypeOf((*MockKernelSessionManager)(nil).ConnectTo), kernelId, sessionId, username)
}

// CreateFile mocks base method.
func (m *MockKernelSessionManager) CreateFile(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockKernelSessionManagerMockRecorder) CreateFile(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockKernelSessionManager)(nil).CreateFile), path)
}

// CreateSession mocks base method.
func (m *MockKernelSessionManager) CreateSession(sessionId, path, sessionType, kernelSpecName string, resourceSpec *jupyter.ResourceSpec) (*jupyter.SessionConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", sessionId, path, sessionType, kernelSpecName, resourceSpec)
	ret0, _ := ret[0].(*jupyter.SessionConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockKernelSessionManagerMockRecorder) CreateSession(sessionId, path, sessionType, kernelSpecName, resourceSpec any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockKernelSessionManager)(nil).CreateSession), sessionId, path, sessionType, kernelSpecName, resourceSpec)
}

// GetMetadata mocks base method.
func (m *MockKernelSessionManager) GetMetadata(key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockKernelSessionManagerMockRecorder) GetMetadata(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockKernelSessionManager)(nil).GetMetadata), key)
}

// GetMetrics mocks base method.
func (m *MockKernelSessionManager) GetMetrics() jupyter.KernelManagerMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(jupyter.KernelManagerMetrics)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockKernelSessionManagerMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockKernelSessionManager)(nil).GetMetrics))
}

// InterruptKernel mocks base method.
func (m *MockKernelSessionManager) InterruptKernel(sessionId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InterruptKernel", sessionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// InterruptKernel indicates an expected call of InterruptKernel.
func (mr *MockKernelSessionManagerMockRecorder) InterruptKernel(sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InterruptKernel", reflect.TypeOf((*MockKernelSessionManager)(nil).InterruptKernel), sessionId)
}

// RegisterOnErrorHandler mocks base method.
func (m *MockKernelSessionManager) RegisterOnErrorHandler(handler jupyter.ErrorHandler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterOnErrorHandler", handler)
}

// RegisterOnErrorHandler indicates an expected call of RegisterOnErrorHandler.
func (mr *MockKernelSessionManagerMockRecorder) RegisterOnErrorHandler(handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOnErrorHandler", reflect.TypeOf((*MockKernelSessionManager)(nil).RegisterOnErrorHandler), handler)
}

// StopKernel mocks base method.
func (m *MockKernelSessionManager) StopKernel(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopKernel", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopKernel indicates an expected call of StopKernel.
func (mr *MockKernelSessionManagerMockRecorder) StopKernel(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopKernel", reflect.TypeOf((*MockKernelSessionManager)(nil).StopKernel), id)
}

// MockKernelManagerMetrics is a mock of KernelManagerMetrics interface.
type MockKernelManagerMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockKernelManagerMetricsMockRecorder
	isgomock struct{}
}

// MockKernelManagerMetricsMockRecorder is the mock recorder for MockKernelManagerMetrics.
type MockKernelManagerMetricsMockRecorder struct {
	mock *MockKernelManagerMetrics
}

// NewMockKernelManagerMetrics creates a new mock instance.
func NewMockKernelManagerMetrics(ctrl *gomock.Controller) *MockKernelManagerMetrics {
	mock := &MockKernelManagerMetrics{ctrl: ctrl}
	mock.recorder = &MockKernelManagerMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelManagerMetrics) EXPECT() *MockKernelManagerMetricsMockRecorder {
	return m.recorder
}

// FileCreated mocks base method.
func (m *MockKernelManagerMetrics) FileCreated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FileCreated")
}

// FileCreated indicates an expected call of FileCreated.
func (mr *MockKernelManagerMetricsMockRecorder) FileCreated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileCreated", reflect.TypeOf((*MockKernelManagerMetrics)(nil).FileCreated))
}

// KernelCreated mocks base method.
func (m *MockKernelManagerMetrics) KernelCreated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KernelCreated")
}

// KernelCreated indicates an expected call of KernelCreated.
func (mr *MockKernelManagerMetricsMockRecorder) KernelCreated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KernelCreated", reflect.TypeOf((*MockKernelManagerMetrics)(nil).KernelCreated))
}

// SessionCreated mocks base method.
func (m *MockKernelManagerMetrics) SessionCreated(latency time.Duration, workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SessionCreated", latency, workloadId)
}

// SessionCreated indicates an expected call of SessionCreated.
func (mr *MockKernelManagerMetricsMockRecorder) SessionCreated(latency, workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionCreated", reflect.TypeOf((*MockKernelManagerMetrics)(nil).SessionCreated), latency, workloadId)
}

// SessionTerminated mocks base method.
func (m *MockKernelManagerMetrics) SessionTerminated(latency time.Duration, workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SessionTerminated", latency, workloadId)
}

// SessionTerminated indicates an expected call of SessionTerminated.
func (mr *MockKernelManagerMetricsMockRecorder) SessionTerminated(latency, workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SessionTerminated", reflect.TypeOf((*MockKernelManagerMetrics)(nil).SessionTerminated), latency, workloadId)
}

// MockKernelMessage is a mock of KernelMessage interface.
type MockKernelMessage struct {
	ctrl     *gomock.Controller
	recorder *MockKernelMessageMockRecorder
	isgomock struct{}
}

// MockKernelMessageMockRecorder is the mock recorder for MockKernelMessage.
type MockKernelMessageMockRecorder struct {
	mock *MockKernelMessage
}

// NewMockKernelMessage creates a new mock instance.
func NewMockKernelMessage(ctrl *gomock.Controller) *MockKernelMessage {
	mock := &MockKernelMessage{ctrl: ctrl}
	mock.recorder = &MockKernelMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKernelMessage) EXPECT() *MockKernelMessageMockRecorder {
	return m.recorder
}

// AddMetadata mocks base method.
func (m *MockKernelMessage) AddMetadata(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMetadata", key, value)
}

// AddMetadata indicates an expected call of AddMetadata.
func (mr *MockKernelMessageMockRecorder) AddMetadata(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetadata", reflect.TypeOf((*MockKernelMessage)(nil).AddMetadata), key, value)
}

// DecodeContent mocks base method.
func (m *MockKernelMessage) DecodeContent() (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeContent")
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeContent indicates an expected call of DecodeContent.
func (mr *MockKernelMessageMockRecorder) DecodeContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeContent", reflect.TypeOf((*MockKernelMessage)(nil).DecodeContent))
}

// GetBuffers mocks base method.
func (m *MockKernelMessage) GetBuffers() [][]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuffers")
	ret0, _ := ret[0].([][]byte)
	return ret0
}

// GetBuffers indicates an expected call of GetBuffers.
func (mr *MockKernelMessageMockRecorder) GetBuffers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuffers", reflect.TypeOf((*MockKernelMessage)(nil).GetBuffers))
}

// GetChannel mocks base method.
func (m *MockKernelMessage) GetChannel() jupyter.KernelSocketChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel")
	ret0, _ := ret[0].(jupyter.KernelSocketChannel)
	return ret0
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockKernelMessageMockRecorder) GetChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockKernelMessage)(nil).GetChannel))
}

// GetContent mocks base method.
func (m *MockKernelMessage) GetContent() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent")
	ret0, _ := ret[0].(any)
	return ret0
}

// GetContent indicates an expected call of GetContent.
func (mr *MockKernelMessageMockRecorder) GetContent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockKernelMessage)(nil).GetContent))
}

// GetHeader mocks base method.
func (m *MockKernelMessage) GetHeader() *jupyter.KernelMessageHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader")
	ret0, _ := ret[0].(*jupyter.KernelMessageHeader)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockKernelMessageMockRecorder) GetHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockKernelMessage)(nil).GetHeader))
}

// GetMetadata mocks base method.
func (m *MockKernelMessage) GetMetadata() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockKernelMessageMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockKernelMessage)(nil).GetMetadata))
}

// GetParentHeader mocks base method.
func (m *MockKernelMessage) GetParentHeader() *jupyter.KernelMessageHeader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentHeader")
	ret0, _ := ret[0].(*jupyter.KernelMessageHeader)
	return ret0
}

// GetParentHeader indicates an expected call of GetParentHeader.
func (mr *MockKernelMessageMockRecorder) GetParentHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentHeader", reflect.TypeOf((*MockKernelMessage)(nil).GetParentHeader))
}

// String mocks base method.
func (m *MockKernelMessage) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockKernelMessageMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockKernelMessage)(nil).String))
}

// MockMetricsConsumer is a mock of MetricsConsumer interface.
type MockMetricsConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsConsumerMockRecorder
	isgomock struct{}
}

// MockMetricsConsumerMockRecorder is the mock recorder for MockMetricsConsumer.
type MockMetricsConsumerMockRecorder struct {
	mock *MockMetricsConsumer
}

// NewMockMetricsConsumer creates a new mock instance.
func NewMockMetricsConsumer(ctrl *gomock.Controller) *MockMetricsConsumer {
	mock := &MockMetricsConsumer{ctrl: ctrl}
	mock.recorder = &MockMetricsConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsConsumer) EXPECT() *MockMetricsConsumerMockRecorder {
	return m.recorder
}

// AddJupyterRequestExecuteTime mocks base method.
func (m *MockMetricsConsumer) AddJupyterRequestExecuteTime(latencyMilliseconds int64, kernelId, workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddJupyterRequestExecuteTime", latencyMilliseconds, kernelId, workloadId)
}

// AddJupyterRequestExecuteTime indicates an expected call of AddJupyterRequestExecuteTime.
func (mr *MockMetricsConsumerMockRecorder) AddJupyterRequestExecuteTime(latencyMilliseconds, kernelId, workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJupyterRequestExecuteTime", reflect.TypeOf((*MockMetricsConsumer)(nil).AddJupyterRequestExecuteTime), latencyMilliseconds, kernelId, workloadId)
}

// ObserveJupyterExecuteRequestE2ELatency mocks base method.
func (m *MockMetricsConsumer) ObserveJupyterExecuteRequestE2ELatency(latencyMilliseconds int64, workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveJupyterExecuteRequestE2ELatency", latencyMilliseconds, workloadId)
}

// ObserveJupyterExecuteRequestE2ELatency indicates an expected call of ObserveJupyterExecuteRequestE2ELatency.
func (mr *MockMetricsConsumerMockRecorder) ObserveJupyterExecuteRequestE2ELatency(latencyMilliseconds, workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveJupyterExecuteRequestE2ELatency", reflect.TypeOf((*MockMetricsConsumer)(nil).ObserveJupyterExecuteRequestE2ELatency), latencyMilliseconds, workloadId)
}

// ObserveJupyterSessionCreationLatency mocks base method.
func (m *MockMetricsConsumer) ObserveJupyterSessionCreationLatency(latencyMilliseconds int64, workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveJupyterSessionCreationLatency", latencyMilliseconds, workloadId)
}

// ObserveJupyterSessionCreationLatency indicates an expected call of ObserveJupyterSessionCreationLatency.
func (mr *MockMetricsConsumerMockRecorder) ObserveJupyterSessionCreationLatency(latencyMilliseconds, workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveJupyterSessionCreationLatency", reflect.TypeOf((*MockMetricsConsumer)(nil).ObserveJupyterSessionCreationLatency), latencyMilliseconds, workloadId)
}

// ObserveJupyterSessionTerminationLatency mocks base method.
func (m *MockMetricsConsumer) ObserveJupyterSessionTerminationLatency(latencyMilliseconds int64, workloadId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveJupyterSessionTerminationLatency", latencyMilliseconds, workloadId)
}

// ObserveJupyterSessionTerminationLatency indicates an expected call of ObserveJupyterSessionTerminationLatency.
func (mr *MockMetricsConsumerMockRecorder) ObserveJupyterSessionTerminationLatency(latencyMilliseconds, workloadId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveJupyterSessionTerminationLatency", reflect.TypeOf((*MockMetricsConsumer)(nil).ObserveJupyterSessionTerminationLatency), latencyMilliseconds, workloadId)
}
