// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\internal\domain\concurrent_websocket.go
//
// Generated by this command:
//
//	mockgen -source C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\internal\domain\concurrent_websocket.go -package mock_domain -destination C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\internal\mock_domain\mock_concurrent_websocket.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConcurrentWebSocket is a mock of ConcurrentWebSocket interface.
type MockConcurrentWebSocket struct {
	ctrl     *gomock.Controller
	recorder *MockConcurrentWebSocketMockRecorder
	isgomock struct{}
}

// MockConcurrentWebSocketMockRecorder is the mock recorder for MockConcurrentWebSocket.
type MockConcurrentWebSocketMockRecorder struct {
	mock *MockConcurrentWebSocket
}

// NewMockConcurrentWebSocket creates a new mock instance.
func NewMockConcurrentWebSocket(ctrl *gomock.Controller) *MockConcurrentWebSocket {
	mock := &MockConcurrentWebSocket{ctrl: ctrl}
	mock.recorder = &MockConcurrentWebSocketMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConcurrentWebSocket) EXPECT() *MockConcurrentWebSocketMockRecorder {
	return m.recorder
}

// AddMetadata mocks base method.
func (m *MockConcurrentWebSocket) AddMetadata(key string, value any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddMetadata", key, value)
}

// AddMetadata indicates an expected call of AddMetadata.
func (mr *MockConcurrentWebSocketMockRecorder) AddMetadata(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetadata", reflect.TypeOf((*MockConcurrentWebSocket)(nil).AddMetadata), key, value)
}

// Close mocks base method.
func (m *MockConcurrentWebSocket) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConcurrentWebSocketMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConcurrentWebSocket)(nil).Close))
}

// GetMetadata mocks base method.
func (m *MockConcurrentWebSocket) GetMetadata(key string) (any, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockConcurrentWebSocketMockRecorder) GetMetadata(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockConcurrentWebSocket)(nil).GetMetadata), key)
}

// ReadJSON mocks base method.
func (m *MockConcurrentWebSocket) ReadJSON(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJSON", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadJSON indicates an expected call of ReadJSON.
func (mr *MockConcurrentWebSocketMockRecorder) ReadJSON(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJSON", reflect.TypeOf((*MockConcurrentWebSocket)(nil).ReadJSON), v)
}

// ReadMessage mocks base method.
func (m *MockConcurrentWebSocket) ReadMessage() (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessage")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReadMessage indicates an expected call of ReadMessage.
func (mr *MockConcurrentWebSocketMockRecorder) ReadMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessage", reflect.TypeOf((*MockConcurrentWebSocket)(nil).ReadMessage))
}

// RemoteAddr mocks base method.
func (m *MockConcurrentWebSocket) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConcurrentWebSocketMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConcurrentWebSocket)(nil).RemoteAddr))
}

// WriteJSON mocks base method.
func (m *MockConcurrentWebSocket) WriteJSON(v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteJSON", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteJSON indicates an expected call of WriteJSON.
func (mr *MockConcurrentWebSocketMockRecorder) WriteJSON(v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteJSON", reflect.TypeOf((*MockConcurrentWebSocket)(nil).WriteJSON), v)
}

// WriteMessage mocks base method.
func (m *MockConcurrentWebSocket) WriteMessage(messageType int, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteMessage", messageType, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteMessage indicates an expected call of WriteMessage.
func (mr *MockConcurrentWebSocketMockRecorder) WriteMessage(messageType, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessage", reflect.TypeOf((*MockConcurrentWebSocket)(nil).WriteMessage), messageType, data)
}
