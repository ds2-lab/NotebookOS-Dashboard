// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\internal\server\workload\manager.go
//
// Generated by this command:
//
//	mockgen -source C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\internal\server\workload\manager.go -package mock_workload -destination C:\Users\benrc\go\src\github.com\workload-driver-react\driver-backend\internal\server\mock_workload\mock_manager.go
//

// Package mock_workload is a generated GoMock package.
package mock_workload

import (
	reflect "reflect"

	proto "github.com/scusemua/workload-driver-react/m/v2/internal/server/api/proto"
	workload "github.com/scusemua/workload-driver-react/m/v2/internal/server/workload"
	gomock "go.uber.org/mock/gomock"
)

// MockCallbackProvider is a mock of CallbackProvider interface.
type MockCallbackProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackProviderMockRecorder
	isgomock struct{}
}

// MockCallbackProviderMockRecorder is the mock recorder for MockCallbackProvider.
type MockCallbackProviderMockRecorder struct {
	mock *MockCallbackProvider
}

// NewMockCallbackProvider creates a new mock instance.
func NewMockCallbackProvider(ctrl *gomock.Controller) *MockCallbackProvider {
	mock := &MockCallbackProvider{ctrl: ctrl}
	mock.recorder = &MockCallbackProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallbackProvider) EXPECT() *MockCallbackProviderMockRecorder {
	return m.recorder
}

// GetSchedulingPolicy mocks base method.
func (m *MockCallbackProvider) GetSchedulingPolicy() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedulingPolicy")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetSchedulingPolicy indicates an expected call of GetSchedulingPolicy.
func (mr *MockCallbackProviderMockRecorder) GetSchedulingPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedulingPolicy", reflect.TypeOf((*MockCallbackProvider)(nil).GetSchedulingPolicy))
}

// HandleCriticalWorkloadError mocks base method.
func (m *MockCallbackProvider) HandleCriticalWorkloadError(workloadId string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleCriticalWorkloadError", workloadId, err)
}

// HandleCriticalWorkloadError indicates an expected call of HandleCriticalWorkloadError.
func (mr *MockCallbackProviderMockRecorder) HandleCriticalWorkloadError(workloadId, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleCriticalWorkloadError", reflect.TypeOf((*MockCallbackProvider)(nil).HandleCriticalWorkloadError), workloadId, err)
}

// HandleWorkloadError mocks base method.
func (m *MockCallbackProvider) HandleWorkloadError(workloadId string, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleWorkloadError", workloadId, err)
}

// HandleWorkloadError indicates an expected call of HandleWorkloadError.
func (mr *MockCallbackProviderMockRecorder) HandleWorkloadError(workloadId, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWorkloadError", reflect.TypeOf((*MockCallbackProvider)(nil).HandleWorkloadError), workloadId, err)
}

// RefreshAndClearClusterStatistics mocks base method.
func (m *MockCallbackProvider) RefreshAndClearClusterStatistics(update, clear bool) (*workload.ClusterStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshAndClearClusterStatistics", update, clear)
	ret0, _ := ret[0].(*workload.ClusterStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshAndClearClusterStatistics indicates an expected call of RefreshAndClearClusterStatistics.
func (mr *MockCallbackProviderMockRecorder) RefreshAndClearClusterStatistics(update, clear any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshAndClearClusterStatistics", reflect.TypeOf((*MockCallbackProvider)(nil).RefreshAndClearClusterStatistics), update, clear)
}

// SendNotification mocks base method.
func (m *MockCallbackProvider) SendNotification(notification *proto.Notification) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendNotification", notification)
}

// SendNotification indicates an expected call of SendNotification.
func (mr *MockCallbackProviderMockRecorder) SendNotification(notification any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNotification", reflect.TypeOf((*MockCallbackProvider)(nil).SendNotification), notification)
}
